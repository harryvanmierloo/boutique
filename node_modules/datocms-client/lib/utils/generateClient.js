'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generateClient;

require('proxy-polyfill');

var _jsonSchemaRefParser = require('json-schema-ref-parser');

var _jsonSchemaRefParser2 = _interopRequireDefault(_jsonSchemaRefParser);

var _pluralize = require('pluralize');

var _pluralize2 = _interopRequireDefault(_pluralize);

var _humps = require('humps');

var _fetch = require('./fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _deserializeJsonApi = require('./deserializeJsonApi');

var _deserializeJsonApi2 = _interopRequireDefault(_deserializeJsonApi);

var _serializeJsonApi = require('./serializeJsonApi');

var _serializeJsonApi2 = _interopRequireDefault(_serializeJsonApi);

var _Client = require('../Client');

var _Client2 = _interopRequireDefault(_Client);

var _fetchAllPages = require('./fetchAllPages');

var _fetchAllPages2 = _interopRequireDefault(_fetchAllPages);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getProps = function getProps(obj) {
  return Object.getOwnPropertyNames(obj).concat(Object.getPrototypeOf(obj) !== Object.prototype && Object.getOwnPropertyNames(Object.getPrototypeOf(obj))).filter(function (p) {
    return p !== 'constructor';
  });
};

var toMap = function toMap(keys) {
  return keys.reduce(function (acc, prop) {
    return Object.assign(acc, _defineProperty({}, prop, true));
  }, {});
};

function generateClient(subdomain, cache) {
  var extraMethods = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return function Client(token) {
    var extraHeaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var baseUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'https://' + subdomain + '.datocms.com';

    var schemaPromise = void 0;

    var rawClient = new _Client2.default(token, extraHeaders, baseUrl);

    var extraProps = getProps(extraMethods);
    var rawClientProps = getProps(rawClient);

    Object.assign(cache, { client: true }, toMap(extraProps), toMap(rawClientProps));

    var client = new Proxy(cache, {
      get: function get(obj1, namespace) {
        if (namespace === 'client') {
          return rawClient;
        }

        if (rawClientProps.includes(namespace)) {
          return typeof rawClient[namespace] === 'function' ? rawClient[namespace].bind(rawClient) : rawClient[namespace];
        }

        if (extraProps.includes(namespace)) {
          return typeof extraMethods[namespace] === 'function' ? extraMethods[namespace].bind(client, client) : extraMethods[namespace];
        }

        return new Proxy(cache[namespace] || {}, {
          get: function get(obj2, apiCall) {
            return function call() {
              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              if (!schemaPromise) {
                schemaPromise = (0, _fetch2.default)('https://' + subdomain + '.datocms.com/docs/' + subdomain + '-hyperschema.json').then(function (res) {
                  return res.json();
                }).then(function (schema) {
                  return _jsonSchemaRefParser2.default.dereference(schema);
                });
              }

              return schemaPromise.then(function (schema) {
                var singularized = (0, _humps.decamelize)(_pluralize2.default.singular(namespace));
                var sub = schema.properties[singularized];

                if (!sub) {
                  throw new TypeError(namespace + ' is not a valid namespace');
                }

                var methodNames = {
                  instances: 'all',
                  self: 'find'
                };

                var identityRegexp = /\{\(.*?definitions%2F(.*?)%2Fdefinitions%2Fidentity\)}/g;

                var link = sub.links.find(function (l) {
                  return (methodNames[l.rel] || (0, _humps.camelize)(l.rel)) === apiCall;
                });

                if (!link) {
                  throw new TypeError(namespace + '.' + apiCall + ' is not a valid API method');
                }

                var lastUrlId = void 0;

                var url = link.href.replace(identityRegexp, function () {
                  lastUrlId = args.shift();
                  return lastUrlId;
                });

                var body = {};
                if (link.schema && (link.method === 'PUT' || link.method === 'POST')) {
                  var unserializedBody = args.shift();
                  body = (0, _serializeJsonApi2.default)(singularized, unserializedBody, link, lastUrlId);
                }

                if (link.method === 'POST') {
                  return rawClient.post('' + url, body).then(function (response) {
                    return Promise.resolve((0, _deserializeJsonApi2.default)(response));
                  });
                } else if (link.method === 'PUT') {
                  return rawClient.put('' + url, body).then(function (response) {
                    return Promise.resolve((0, _deserializeJsonApi2.default)(response));
                  });
                } else if (link.method === 'DELETE') {
                  return rawClient.delete(url).then(function (response) {
                    return Promise.resolve((0, _deserializeJsonApi2.default)(response));
                  });
                }

                var queryString = args.shift();
                var options = args.shift() || {};

                var deserializeResponse = Object.prototype.hasOwnProperty.call(options, 'deserializeResponse') ? options.deserializeResponse : true;

                var allPages = Object.prototype.hasOwnProperty.call(options, 'allPages') ? options.allPages : false;

                var request = allPages ? (0, _fetchAllPages2.default)(rawClient, url, queryString) : rawClient.get(url, queryString);

                return request.then(function (response) {
                  return Promise.resolve(deserializeResponse ? (0, _deserializeJsonApi2.default)(response) : response);
                });
              });
            };
          }
        });
      }
    });

    return client;
  };
}
module.exports = exports['default'];