'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = serializeJsonApi;

var _humps = require('humps');

var _arrDiff = require('arr-diff');

var _arrDiff2 = _interopRequireDefault(_arrDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var linkAttributes = function linkAttributes(schema) {
  return schema.properties.data.properties.attributes;
};
var requiredAttributes = function requiredAttributes(schema) {
  return linkAttributes(schema).required || [];
};

var linkRelationships = function linkRelationships(schema) {
  return !schema || !schema.properties.data ? {} : schema.properties.data.properties.relationships;
};
var requiredRelationships = function requiredRelationships(schema) {
  return linkRelationships(schema).required || [];
};

function relationships(type, schema) {
  if (type === 'item') {
    return { item_type: { collection: false, type: 'item_type' } };
  }

  if (!linkRelationships(schema).properties) {
    return {};
  }

  return Object.entries(linkRelationships(schema).properties).reduce(function (acc, _ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var relationship = _ref2[0];
    var relAttributes = _ref2[1];

    var isCollection = relAttributes.properties.data.type === 'array';

    var isObject = relAttributes.properties.data.type === 'object';

    var definition = void 0;

    if (isCollection) {
      definition = relAttributes.properties.data.items;
    } else if (isObject) {
      definition = relAttributes.properties.data;
    } else {
      definition = relAttributes.properties.data.anyOf.find(function (x) {
        return x.type[0] !== 'null';
      });
    }

    var relType = definition.properties.type.pattern.replace(new RegExp(/(^\^|\$$)/, 'g'), '');

    return Object.assign(acc, _defineProperty({}, relationship, { collection: isCollection, type: relType }));
  }, {});
}

function serializedRelationships(type, unserializedBody, schema) {
  return Object.entries(relationships(type, schema)).reduce(function (acc, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2);

    var relationship = _ref4[0];
    var meta = _ref4[1];

    if (Object.prototype.hasOwnProperty.call(unserializedBody, (0, _humps.camelize)(relationship))) {
      var value = unserializedBody[(0, _humps.camelize)(relationship)];
      var data = void 0;

      if (value) {
        if (meta.collection) {
          data = value.map(function (id) {
            return { type: meta.type, id: id };
          });
        } else {
          data = { type: meta.type, id: value };
        }
      } else {
        data = null;
      }

      return Object.assign(acc, _defineProperty({}, relationship, { data: data }));
    } else if (requiredRelationships(schema).includes(relationship)) {
      throw new Error('Required attribute: ' + relationship);
    }

    return Object.assign(acc, _defineProperty({}, relationship, { data: null }));
  }, {});
}

function serializedAttributes(type) {
  var unserializedBody = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var schema = arguments[2];

  var attrs = type === 'item' ? (0, _arrDiff2.default)(Object.keys(unserializedBody), ['itemType', 'id', 'createdAt', 'updatedAt', 'isValid', 'publishedVersion', 'currentVersion']) : Object.keys(linkAttributes(schema).properties);

  return attrs.reduce(function (acc, attribute) {
    if (Object.prototype.hasOwnProperty.call(unserializedBody, (0, _humps.camelize)(attribute))) {
      return Object.assign(acc, _defineProperty({}, attribute, unserializedBody[(0, _humps.camelize)(attribute)]));
    } else if (requiredAttributes(schema).includes(attribute)) {
      throw new Error('Required attribute: ' + attribute);
    }

    return acc;
  }, {});
}

function serializeJsonApi() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (args.length === 4 || args.length === 3) {
    var type = args[0];
    var unserializedBody = args[1];
    var link = args[2];
    var itemId = args[3];

    var data = {};

    data.type = type;

    if (itemId || unserializedBody.id) {
      data.id = itemId || unserializedBody.id;
    }

    data.attributes = serializedAttributes(type, unserializedBody, link.schema);

    if (link.schema.properties && linkRelationships(link.schema)) {
      data.relationships = serializedRelationships(type, unserializedBody, link.schema);
    }

    return { data: data };
  }

  throw new Error('Invalid arguments');
}
module.exports = exports['default'];