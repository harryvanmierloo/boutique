'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deserializeJsonApi = require('../../deserializeJsonApi');

var _deserializeJsonApi2 = _interopRequireDefault(_deserializeJsonApi);

var _serializeJsonApi = require('../../serializeJsonApi');

var _serializeJsonApi2 = _interopRequireDefault(_serializeJsonApi);

var _fetchAllPages = require('../fetchAllPages');

var _fetchAllPages2 = _interopRequireDefault(_fetchAllPages);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ItemRepo = function () {
  function ItemRepo(client) {
    _classCallCheck(this, ItemRepo);

    this.client = client;
  }

  _createClass(ItemRepo, [{
    key: 'create',
    value: function create(resourceAttributes) {
      var attributeKeys = Object.keys(resourceAttributes);
      ['id', 'itemType'].forEach(function (key) {
        var index = attributeKeys.indexOf(key);
        if (index > -1) {
          attributeKeys.splice(index, 1);
        }
      });

      var serializedResource = (0, _serializeJsonApi2.default)(resourceAttributes, {
        type: 'item',
        attributes: attributeKeys,
        requiredAttributes: [],
        relationships: {
          itemType: 'item_type'
        },
        requiredRelationships: ['itemType']
      });
      return this.client.post('/items', serializedResource).then(function (response) {
        return Promise.resolve((0, _deserializeJsonApi2.default)(response));
      });
    }
  }, {
    key: 'update',
    value: function update(itemId, resourceAttributes) {
      var attributeKeys = Object.keys(resourceAttributes);
      ['id', 'createdAt', 'updatedAt', 'isValid', 'itemType', 'currentVersion', 'publishedVersion'].forEach(function (key) {
        var index = attributeKeys.indexOf(key);
        if (index > -1) {
          attributeKeys.splice(index, 1);
        }
      });

      var serializedResource = (0, _serializeJsonApi2.default)(itemId, resourceAttributes, {
        type: 'item',
        attributes: attributeKeys
      });
      return this.client.put('/items/' + itemId, serializedResource).then(function (response) {
        return Promise.resolve((0, _deserializeJsonApi2.default)(response));
      });
    }
  }, {
    key: 'all',
    value: function all() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var deserializeResponse = Object.prototype.hasOwnProperty.call(options, 'deserializeResponse') ? options.deserializeResponse : true;

      var allPages = Object.prototype.hasOwnProperty.call(options, 'allPages') ? options.allPages : false;

      var request = void 0;

      if (allPages) {
        request = (0, _fetchAllPages2.default)(this.client, '/items', params);
      } else {
        request = this.client.get('/items', params);
      }

      return request.then(function (response) {
        return Promise.resolve(deserializeResponse ? (0, _deserializeJsonApi2.default)(response) : response);
      });
    }
  }, {
    key: 'publish',
    value: function publish(itemId) {
      return this.client.put('/items/' + itemId + '/publish', {}).then(function (response) {
        return Promise.resolve((0, _deserializeJsonApi2.default)(response));
      });
    }
  }, {
    key: 'unpublish',
    value: function unpublish(itemId) {
      return this.client.put('/items/' + itemId + '/unpublish', {}).then(function (response) {
        return Promise.resolve((0, _deserializeJsonApi2.default)(response));
      });
    }
  }, {
    key: 'find',
    value: function find(itemId) {
      return this.client.get('/items/' + itemId).then(function (response) {
        return Promise.resolve((0, _deserializeJsonApi2.default)(response));
      });
    }
  }, {
    key: 'destroy',
    value: function destroy(itemId) {
      return this.client.delete('/items/' + itemId).then(function (response) {
        return Promise.resolve((0, _deserializeJsonApi2.default)(response));
      });
    }
  }]);

  return ItemRepo;
}();

exports.default = ItemRepo;
module.exports = exports['default'];