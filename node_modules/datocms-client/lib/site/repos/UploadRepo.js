'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deserializeJsonApi = require('../../deserializeJsonApi');

var _deserializeJsonApi2 = _interopRequireDefault(_deserializeJsonApi);

var _serializeJsonApi = require('../../serializeJsonApi');

var _serializeJsonApi2 = _interopRequireDefault(_serializeJsonApi);

var _fetchAllPages = require('../fetchAllPages');

var _fetchAllPages2 = _interopRequireDefault(_fetchAllPages);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UploadRepo = function () {
  function UploadRepo(client) {
    _classCallCheck(this, UploadRepo);

    this.client = client;
  }

  _createClass(UploadRepo, [{
    key: 'create',
    value: function create(resourceAttributes) {
      var serializedResource = (0, _serializeJsonApi2.default)(resourceAttributes, {
        type: 'upload',
        attributes: ['size', 'width', 'height', 'path', 'format', 'alt', 'title'],
        requiredAttributes: ['size', 'width', 'height', 'path', 'format', 'alt', 'title']
      });
      return this.client.post('/uploads', serializedResource).then(function (response) {
        return Promise.resolve((0, _deserializeJsonApi2.default)(response));
      });
    }
  }, {
    key: 'all',
    value: function all() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var deserializeResponse = Object.prototype.hasOwnProperty.call(options, 'deserializeResponse') ? options.deserializeResponse : true;

      var allPages = Object.prototype.hasOwnProperty.call(options, 'allPages') ? options.allPages : false;

      var request = void 0;

      if (allPages) {
        request = (0, _fetchAllPages2.default)(this.client, '/uploads', params);
      } else {
        request = this.client.get('/uploads', params);
      }

      return request.then(function (response) {
        return Promise.resolve(deserializeResponse ? (0, _deserializeJsonApi2.default)(response) : response);
      });
    }
  }, {
    key: 'find',
    value: function find(uploadId) {
      return this.client.get('/uploads/' + uploadId).then(function (response) {
        return Promise.resolve((0, _deserializeJsonApi2.default)(response));
      });
    }
  }, {
    key: 'destroy',
    value: function destroy(uploadId) {
      return this.client.delete('/uploads/' + uploadId).then(function (response) {
        return Promise.resolve((0, _deserializeJsonApi2.default)(response));
      });
    }
  }, {
    key: 'update',
    value: function update(uploadId, resourceAttributes) {
      var serializedResource = (0, _serializeJsonApi2.default)(uploadId, resourceAttributes, {
        type: 'upload',
        attributes: ['alt', 'title']
      });
      return this.client.put('/uploads/' + uploadId, serializedResource).then(function (response) {
        return Promise.resolve((0, _deserializeJsonApi2.default)(response));
      });
    }
  }]);

  return UploadRepo;
}();

exports.default = UploadRepo;
module.exports = exports['default'];